#include <iostream>
#include <string>
#include <set>

using namespace std;     

int main() {
    // set для хранения аккаунтов, с которых уже были засчитаны результаты.
    // set обеспечивает автоматическое хранение только уникальных элементов (аккаунтов).
    // set также хранит элементы в отсортированном порядке, но для решения данной задачи это не критично.
    set<string> acceptedAccounts;

    int numTests;       // Переменная для хранения количества тестов.
    cout << "Введите количество тестов: "; // Запрашиваем у пользователя количество тестов.
    cin >> numTests;    // Считываем количество тестов с консоли.
    cin.ignore();       //  Очищаем буфер ввода от символа новой строки, оставшегося после ввода числа.
    //  Это необходимо, чтобы getline() корректно считывал номер аккаунта в цикле.

// Цикл для обработки каждого теста.
    for (int i = 0; i < numTests; ++i) {
        string account;  // Переменная для хранения номера аккаунта.
        cout << "Введите номер аккаунта для теста " << i + 1 << ": "; // Запрашиваем у пользователя номер аккаунта.
        getline(cin, account); // Считываем номер аккаунта с консоли.
        // getline() читает строку до символа новой строки,
        // в отличие от cin, который останавливается на пробелах.

// Проверяем, был ли уже засчитан результат с этого аккаунта.
// Используем set.find() для поиска аккаунта в множестве acceptedAccounts.
// set.find() возвращает итератор на элемент, если он найден,
// и set.end(), если элемент не найден.
        if (acceptedAccounts.find(account) == acceptedAccounts.end()) {
            // Если аккаунт не найден в set (т.е. результат с этого аккаунта еще не был засчитан).
            cout << "Результат теста с аккаунта '" << account << "' засчитан." << endl;
            acceptedAccounts.insert(account); // Добавляем аккаунт в set, чтобы отметить, что результат с него был засчитан.
            // set.insert() автоматически заботится о поддержании уникальности.
        }
        else {
            // Если аккаунт найден в set (т.е. результат с этого аккаунта уже был засчитан).
            cout << "Результат теста с аккаунта '" << account << "' не засчитан (повторный)." << endl;
        }
    }

    cout << "\nЗасчитанные результаты для следующих аккаунтов:" << endl; // Выводим заголовок для списка засчитанных аккаунтов.
    // Цикл для вывода всех аккаунтов, чьи результаты были засчитаны.
    for (const string& account : acceptedAccounts) {
        cout << account << endl; // Выводим номер каждого засчитанного аккаунта.
    }

    return 0;                   // Возвращаем 0, чтобы указать на успешное завершение программы.
}
